#loglog4j.rootLogger=级别，输出源1,?输出源2………..?
#-级别:??DEBUG<INFO<WARN<ERROR<FATAL?
log4j.rootLogger=ERROR, Console, infoLog,stdout
#配置日志信息输出目的地 log4j.appender.appenderName = fully.qualified.name.of.appender.class
# 1.org.apache.log4j.ConsoleAppender（控制台）
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#配置日志信息的格式 log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
# 2.org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#灵活地指定布局模式的格式
log4j.appender.Console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p: %c#%M %x: %m%n
#log4j.logger.org=DEBUG
log4j.logger.net.sf.ehcache=DEBUG
#观察security的执行情况
log4j.logger.org.springframework.security=DEBUG
log4j.logger.org.apache.myfaces.shared_impl.renderkit.html=DEBUG
#log4j.logger.org.dbunit=DEBUG
#让 SQL语句输出到 Log4J 或是 Slf4J 日志中
log4j.logger.org.hibernate=DEBUG
log4j.logger.org.springframework=DEBUG
#指定com.ssm包下的所有类的等级为DEBUG
log4j.logger.com.ssm=DEBUG
log4j.logger.org.apache.struts2.json=DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.org.apache.ibatis=DEBUG

#为了在打印台中打印出sql语句中的具体值
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
log4j.appender.infoLog = org.apache.log4j.DailyRollingFileAppender
#指定日志消息的输出最低层次。
log4j.appender.infoLog.Threshold = INFO
#配置日志信息的格式
log4j.appender.infoLog.layout = org.apache.log4j.PatternLayout
#灵活地指定布局模式的格式
log4j.appender.infoLog.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss,SSS} %-5p: %c#%M %x: %m%n
#指定消息输出到文件
log4j.appender.infoLog.File = ../server/default/log/moonhong/info
#生成文件的格式
log4j.appender.infoLog.DatePattern = '_'yyyy-MM-dd'.log'


### 把日志信息输出到控制台 ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout

# Log4j中有三个主要的组件，它们分别是 Logger、Appender和Layout，Log4j 允许开发人员定义多个Logger，每个Logger拥有自己的名字，Logger之间通过名字来表明隶属关系
log4j.logger.log.cas=ERROR,RollingFileForCAS
#org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
log4j.appender.RollingFileForCAS=org.apache.log4j.RollingFileAppender
#后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.RollingFileForCAS.MaxFileSize=20MB
#指定可以产生的滚动文件的最大数
log4j.appender.RollingFileForCAS.MaxBackupIndex=20
#指定消息输出到文件
log4j.appender.RollingFileForCAS.File=../server/default/log/moon/cas_log.log
#布局自定义格式
log4j.appender.RollingFileForCAS.layout=org.apache.log4j.PatternLayout
#格式名 含义
# %c 输出日志信息所属的类的全名
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28
# %f 输出日志信息所属的类的类名
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
# %m 输出代码中指定的信息，如log(message)中的message
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数
# %t 输出产生该日志事件的线程名
log4j.appender.RollingFileForCAS.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p (%F:%L) - %m%n
log4j.logger.log.casFilter=ERROR,RollingFileForCasFilter
log4j.appender.RollingFileForCasFilter=org.apache.log4j.RollingFileAppender
log4j.appender.RollingFileForCasFilter.MaxFileSize=20MB
log4j.appender.RollingFileForCasFilter.MaxBackupIndex=20
log4j.appender.RollingFileForCasFilter.File=../server/default/log/moon/casFilter_log.log
log4j.appender.RollingFileForCasFilter.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFileForCasFilter.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p (%F:%L) - %m%n

log4j.logger.log.loginFilter=ERROR,RollingFileForLoginFilter
log4j.appender.RollingFileForLoginFilter=org.apache.log4j.RollingFileAppender
log4j.appender.RollingFileForLoginFilter.MaxFileSize=20MB
log4j.appender.RollingFileForLoginFilter.MaxBackupIndex=20
log4j.appender.RollingFileForLoginFilter.File=../server/default/log/moon/loginFilter_log.log
log4j.appender.RollingFileForLoginFilter.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFileForLoginFilter.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p (%F:%L) - %m%n
###显示SQL语句部分
log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
